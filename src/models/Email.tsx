/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 email.glb --transform 
Files: email.glb [9.85KB] > Z:\coding\jxsen_2025\public\models\email-transformed.glb [1.78KB] (82%)
*/

import React from 'react'
import {useGLTF} from '@react-three/drei'
import WordMesh from "../WordMesh";
import {Vector3, Mesh, MeshStandardMaterial} from "three";
import {useFrame} from "@react-three/fiber";
import {useRef} from "react";
import Transformation from "../types/Transformation";
import {GLTF} from "three-stdlib";
import FontHolder from "../types/FontHolder";


type GLTFResult = GLTF & {
    nodes: {
        Cube: Mesh
    }
    materials: {
        Material: MeshStandardMaterial
    }
}


export function Email(props: Transformation & FontHolder) {
    // const mesh = React.useRef()
    const mesh = useRef<Mesh>(null!)
    const {nodes, materials} = useGLTF('/models/email-transformed.glb') as GLTFResult
    const [hovered, setHovered] = React.useState(false)

    let lastRotate: number = 0;
    const rots: number[][] = [[0, 0.5, 0], [0.5, 0, 0], [1, 1, 0], [0.3, 0, 0]]
    useFrame((state) => {
        if (!hovered) {
            if (Math.floor(state.clock.elapsedTime) !== lastRotate) {
                mesh.current.rotation.x = rots[lastRotate % rots.length][0]
                mesh.current.rotation.y = rots[lastRotate % rots.length][1]
                mesh.current.rotation.z = rots[lastRotate % rots.length][2]
            }
            lastRotate = Math.floor(state.clock.elapsedTime);
        }
    })

    return (<>
            <group {...props} ref={mesh} dispose={null}
                   onPointerOver={() => setHovered(true)}
                   onPointerOut={() => setHovered(false)}
                   onClick={() => window.open("mailto:jaxsen@jxsen.com", "_blank")}>

                <mesh geometry={nodes.Cube.geometry} material={materials.Material}/>
                <mesh>
                    <boxGeometry args={[6, 4, 1]}/>
                    <meshBasicMaterial visible={false}/>
                </mesh>
            </group>

            {hovered && <WordMesh center={new Vector3(0, -11, 6)}
                                  font={props.font}
                                  word="jaxsen,@,,jxsen,.,c,o,m"/>}
        </>
    )
}

useGLTF.preload('/models/email-transformed.glb')
